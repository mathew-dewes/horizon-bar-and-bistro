
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  cart          Cart?
  order Order[]
  table Table[] 
  tableId String? @unique


  @@unique([email])
  @@map("user")
}

model Table {
      tableNumber String @id
      users User[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}


model Product{
  id String @id @default(cuid())
  name String
  description String
  price Float
  inventoryAmount Int
  category Category
  imageUrl String?
  cartItems CartItems[]
  orderItems OrderItems[]
 
}

model Cart{
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    userId String @unique
    user User @relation(fields: [userId], references: [id])
    cartItems CartItems[]

}

model CartItems {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    quantity Int
    cartId String 
    productId String 
    product Product @relation(fields: [productId], references: [id])
    cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
    @@unique([cartId, productId])
}


model Order {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    userId String
    user User @relation(fields: [userId], references: [id])
    orderItems OrderItems[]
    orderNumber Int
    tableNumber String
    cost Float
    totalItems Int
    status OrderStatus @default(INPROGRESS)

}

model OrderItems {
      id String @id @default(cuid())
      createdAt DateTime @default(now())
      quantity Int
      productId String 
      orderId String
      product Product @relation(fields: [productId], references: [id])
      order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
      ready Boolean @default(false)


}


enum Category {
Spirits
Cocktails
Dessert
Food
Beer
}

enum OrderStatus {
   INPROGRESS
   READY
   COMPLETE
}




